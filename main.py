# –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ pandas
import sys
import openpyxl  # –†–æ–±–æ—Ç–∞ –∑ Excel
import math
from PyQt5.QtGui import QColor
import sqlite3
import pandas as pd
from PyQt5.QtCore import Qt, QDate
from classes import Student
from RegistrationDialog import RegistrationDialog
from change_password_dialog import ChangePasswordDialog
from StudentDialog import StudentDialog
from LoginDialog import LoginDialog
from CourseDialog import CourseDialog
from PyQt5.QtWidgets import (QApplication, QWidget, QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem,
                             QTabWidget, QLabel, QPushButton, QComboBox, QDialog, QFormLayout, QLineEdit,
                             QDialogButtonBox, QMessageBox, QInputDialog, QDateEdit, QAbstractItemView, QFileDialog)






# –ö–ª–∞—Å –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —á–∏—Å–ª–æ–≤–æ–≥–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
class NumericItem(QTableWidgetItem):
    def __lt__(self, other):
        try:
            return float(self.text()) < float(other.text())
        except ValueError:
            return QTableWidgetItem.__lt__(self, other)


# üìå–í–∫–ª–∞–¥–∫–∞1 "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤"
class StudentInfoTab(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        main_layout = QVBoxLayout()
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
        btn_layout = QHBoxLayout()
        self.add_btn = QPushButton("–î–æ–¥–∞—Ç–∏")
        self.edit_btn = QPushButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏")
        self.delete_btn = QPushButton("–í–∏–¥–∞–ª–∏—Ç–∏")
        self.sort_btn = QPushButton("–°–æ—Ä—Ç—É–≤–∞—Ç–∏")
        self.register_btn = QPushButton("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞")
        self.register_btn.setFixedSize(180, 30)
        self.register_btn.setStyleSheet("background-color: #4CAF50; color: white; border-radius: 5px;font-size:1px")
        btn_layout.addWidget(self.register_btn)

        main_layout.addSpacing(20)

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–¥–Ω–∞–∫–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä –∫–Ω–æ–ø–æ–∫ —Ç–∞ –∑–µ–ª–µ–Ω–∏–π –≤—ñ–¥—Ç—ñ–Ω–æ–∫
        btn_size = (120, 30)
        style = "background-color: #4CAF50; color: white; border: none; border-radius: 5px; font-size: 16px; font-size: 16px"
        for btn in (self.add_btn, self.edit_btn, self.delete_btn, self.sort_btn):
            btn.setFixedSize(*btn_size)
            btn.setStyleSheet(style)
            btn_layout.addWidget(btn)

        main_layout.addLayout(btn_layout)
        # –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—Ç—É–ø –ø—ñ—Å–ª—è –∫–Ω–æ–ø–æ–∫
        main_layout.addSpacing(20)


         # –¢–∞–±–ª–∏—Ü—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
        self.table = QTableWidget()
        main_layout.addWidget(self.table)
        self.setLayout(main_layout)

        # self.load_students()

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞ –ø–∞–Ω–µ–ª—å —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –≥—Ä—É–ø
        main_layout.addSpacing(20)
        filter_layout = QHBoxLayout()
        self.all_students_btn = QPushButton("–í–µ—Å—å —Å–ø–∏—Å–æ–∫")
        self.group_ki_21_01_btn = QPushButton("–ö–Ü-21-01")
        self.group_ki_21_02_btn = QPushButton("–ö–Ü-21-02")
        

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ –±–ª–æ–∫—É
        for btn in (self.all_students_btn, self.group_ki_21_01_btn, self.group_ki_21_02_btn):
            btn.setFixedSize(120, 30)
            btn.setStyleSheet("background-color: #A0E0A0; color: white; border: none; border-radius: 5px; font-size: 14px;")
            filter_layout.addWidget(btn)
        
        main_layout.addLayout(filter_layout)

        self.load_students()  # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö

        self.all_students_btn.clicked.connect(lambda: self.load_students(order_by="last_name"))  # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
        self.group_ki_21_01_btn.clicked.connect(lambda: self.load_students("–ö–Ü-21-01", "last_name"))  # –§—ñ–ª—å—Ç—Ä + —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        self.group_ki_21_02_btn.clicked.connect(lambda: self.load_students("–ö–Ü-21-02", "last_name"))  # –§—ñ–ª—å—Ç—Ä + —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è

        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Å–ª–æ—Ç—ñ–≤ –¥–æ –∫–Ω–æ–ø–æ–∫
        self.add_btn.clicked.connect(self.add_student)
        self.edit_btn.clicked.connect(self.edit_student)
        self.delete_btn.clicked.connect(self.delete_student)
        self.sort_btn.clicked.connect(self.sort_students)
        self.register_btn.clicked.connect(self.register_student)


    def load_students(self, group_name=None, order_by=None):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤, –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞ –≥—Ä—É–ø–æ—é."""
        conn = sqlite3.connect("Student.db")
        cursor = conn.cursor()

        query = "SELECT * FROM Student_info"
        params = []

        if group_name:
                query += " WHERE group_name = ?"
                params.append(group_name)

        if order_by:
            query += f" ORDER BY {order_by} ASC"

        cursor.execute(query, params)
        students = cursor.fetchall()
        conn.close()

        self.table.setRowCount(len(students))
        self.table.setColumnCount(6)
        self.table.setHorizontalHeaderLabels(["ID", "–ü—Ä—ñ–∑–≤–∏—â–µ", "–Ü–º'—è", "–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ", "–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è", "–ì—Ä—É–ø–∞"])
        self.table.setColumnHidden(0, True)

        for row, student in enumerate(students):
            for col, data in enumerate(student):
                self.table.setItem(row, col, QTableWidgetItem(str(data)))

        self.table.resizeColumnsToContents()
        self.table.horizontalHeader().setStyleSheet(
            "QHeaderView::section { background-color: #4CAF50; color: white; font-size: 16px; font-weight: bold; padding: 8px; }"
        )
        self.table.setColumnWidth(0, 40)
        self.table.setColumnWidth(1, 200)
        self.table.setColumnWidth(2, 200)
        self.table.setColumnWidth(3, 200)
        self.table.setColumnWidth(4, 180)
        self.table.setColumnWidth(5, 100)
        
    def add_student(self):
        dialog = StudentDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            data = dialog.get_data()
            try:
                student = Student(data['student_id'], data['last_name'], data['first_name'],
                                  data['middle_name'], data['date'], data['group_name'])
                student.add_to_db()
            except Exception as e:
                QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:\n{e}")
            self.load_students()

    def edit_student(self):
        selected = self.table.selectedItems()
        if not selected:
            QMessageBox.warning(self, "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")
            return
        
        row = selected[0].row()
        student_id = int(self.table.item(row, 0).text())
        last_name = self.table.item(row, 1).text()
        first_name = self.table.item(row, 2).text()
        middle_name = self.table.item(row, 3).text()
        date = self.table.item(row, 4).text()
        group_name = self.table.item(row, 5).text()

        current_student = Student(student_id, last_name, first_name, middle_name, date, group_name)
        print("–í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞
        dialog = StudentDialog(self, student=current_student)

        if dialog.exec_() == QDialog.Accepted:
            data = dialog.get_data()
            try:
                updated_student = Student(data['student_id'], data['last_name'], data['first_name'],
                                        data['middle_name'], data['date'], data['group_name'])
                updated_student.update_in_db()

                # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ —è–≤–Ω–æ
                dialog.done(QDialog.Accepted)
                
            except Exception as e:
                QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç–∞:\n{e}")

            self.load_students()


    def delete_student(self):
        selected = self.table.selectedItems()
        if not selected:
            QMessageBox.warning(self, "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
            return
        row = selected[0].row()
        student_id = int(self.table.item(row, 0).text())

        reply = QMessageBox.question(self, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å?",
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            try:
                student = Student(student_id, "", "", "", "", "")
                student.delete_from_db()
            except Exception as e:
                QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:\n{e}")
            self.load_students()

    def sort_students(self):
        order, ok = QInputDialog.getItem(self, "–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è", "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:",
                                         ["–ó–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º", "–ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º"], 0, False)
        if ok and order:
            if order == "–ó–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º":
                self.table.sortItems(1, Qt.AscendingOrder)
            else:
                self.table.sortItems(1, Qt.DescendingOrder)

    
    def register_student(self):
        dialog = RegistrationDialog(self)
        dialog.exec_()





#üìå –í–∫–ª–∞–¥–∫–∞2 CoursesTab –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
class CoursesTab(QWidget):
    def __init__(self):
        super().__init__()
        self.filter_semester = None  # –∑–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞
        self.initUI()

    def initUI(self):
        main_layout = QVBoxLayout()
        main_layout.addSpacing(20)
        
        # –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ –∫–Ω–æ–ø–æ–∫: –î–æ–¥–∞—Ç–∏, –†–µ–¥–∞–≥—É–≤–∞—Ç–∏, –í–∏–¥–∞–ª–∏—Ç–∏, –§—ñ–ª—å—Ç—Ä, –ü–æ–∫–∞–∑–∞—Ç–∏ —É—Å—ñ
        btn_layout = QHBoxLayout()
        self.add_btn = QPushButton("–î–æ–¥–∞—Ç–∏")
        self.edit_btn = QPushButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏")
        self.delete_btn = QPushButton("–í–∏–¥–∞–ª–∏—Ç–∏")
        self.filter_btn = QPushButton("–§—ñ–ª—å—Ç—Ä")
        self.show_all_btn = QPushButton("–ü–æ–∫–∞–∑–∞—Ç–∏ —É—Å—ñ")
        
        btn_size = (120, 30)
        style = "background-color: #4CAF50; color: white; border: none; border-radius: 5px; font-size: 16px"
        for btn in (self.add_btn, self.edit_btn, self.delete_btn, self.filter_btn, self.show_all_btn):
            btn.setFixedSize(*btn_size)
            btn.setStyleSheet(style)
            btn_layout.addWidget(btn)
        main_layout.addLayout(btn_layout)
        main_layout.addSpacing(20)
        
        # –î—Ä—É–≥–∏–π —Ä—è–¥–æ–∫: –≤–∏–ø–∞–¥–∞—é—á—ñ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –∫–Ω–æ–ø–∫–∞ "–°–æ—Ä—Ç—É–≤–∞—Ç–∏"
        
        sort_layout = QHBoxLayout()
        self.sort_field_cb = QComboBox()
        fields = ["ID", "–ù–∞–∑–≤–∞", "–ì–æ–¥–∏–Ω–∏", "–§–æ—Ä–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é", "–°–µ–º–µ—Å—Ç—Ä"]
        self.sort_field_cb.addItems(fields)
        self.sort_order_cb = QComboBox()
        self.sort_order_cb.addItems(["–ó–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º", "–ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º"])
        self.sort_btn = QPushButton("–°–æ—Ä—Ç—É–≤–∞—Ç–∏")
        self.sort_btn.setFixedSize(*btn_size)
        self.sort_btn.setStyleSheet(style)
        
        sort_layout.addWidget(QLabel("–ü–æ–ª–µ:"))
        sort_layout.addWidget(self.sort_field_cb)
        sort_layout.addSpacing(40)
        sort_layout.addWidget(QLabel("–ù–∞–ø—Ä—è–º:"))
        sort_layout.addWidget(self.sort_order_cb)
        sort_layout.addSpacing(40)
        sort_layout.addWidget(self.sort_btn)
        main_layout.addLayout(sort_layout)
        sort_layout.addStretch()
        main_layout.addSpacing(20)
        
        self.table = QTableWidget()
        main_layout.addWidget(self.table)
        self.setLayout(main_layout)
        
        self.load_courses()
        self.add_btn.clicked.connect(self.add_course)
        self.edit_btn.clicked.connect(self.edit_course)
        self.delete_btn.clicked.connect(self.delete_course)
        self.filter_btn.clicked.connect(self.filter_courses)
        self.show_all_btn.clicked.connect(self.show_all_courses)
        self.sort_btn.clicked.connect(self.sort_courses)

    def load_courses(self):
        conn = sqlite3.connect("Student.db")
        cursor = conn.cursor()

        if self.filter_semester:
            cursor.execute("SELECT * FROM Course WHERE semester = ?", (self.filter_semester,))
        else:
            cursor.execute("SELECT * FROM Course")
        courses = cursor.fetchall()
        conn.close()

        self.table.setRowCount(len(courses))
        self.table.setColumnCount(5)
        self.table.setHorizontalHeaderLabels(["ID", "–ù–∞–∑–≤–∞", "–ì–æ–¥–∏–Ω–∏", "–§–æ—Ä–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é", "–°–µ–º–µ—Å—Ç—Ä"])
        self.table.setColumnHidden(0, True)  # —Ö–æ–≤–∞—î–º–æ ID

        for row, course in enumerate(courses):
            for col, data in enumerate(course):
                item = NumericItem(str(data)) if col == 2 else QTableWidgetItem(str(data))
                self.table.setItem(row, col, item)

        self.table.setColumnWidth(0, 40)
        self.table.setColumnWidth(1, 250)
        self.table.setColumnWidth(2, 80)
        self.table.setColumnWidth(3, 160)
        self.table.setColumnWidth(4, 100)

        self.table.horizontalHeader().setStyleSheet(
            "QHeaderView::section { background-color: #4CAF50; color: white; font-size: 16px; font-weight: bold; padding: 8px; }"
        )

    def add_course(self):
        dialog = CourseDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            data = dialog.get_data()
            try:
                conn = sqlite3.connect("Student.db")
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO Course (name, number_hours, form_control, semester)
                    VALUES (?, ?, ?, ?)
                """, (data['name'], data['number_hours'], data['form_control'], data['semester']))
                conn.commit()
                conn.close()
            except Exception as e:
                QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç:\n{e}")
            self.load_courses()


    def edit_course(self):
        selected = self.table.selectedItems()
        if not selected:
            QMessageBox.warning(self, "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")
            return

        row = selected[0].row()
        course_id = int(self.table.item(row, 0).text())
        name = self.table.item(row, 1).text()
        number_hours = int(self.table.item(row, 2).text())
        form_control = self.table.item(row, 3).text()
        semester = self.table.item(row, 4).text()

        current_course = (course_id, name, number_hours, form_control, semester)
        dialog = CourseDialog(self, course=current_course)

        if dialog.exec_() == QDialog.Accepted:
            data = dialog.get_data()
            try:
                conn = sqlite3.connect("Student.db")
                cursor = conn.cursor()
                cursor.execute("""
                    UPDATE Course
                    SET name = ?, number_hours = ?, form_control = ?, semester = ?
                    WHERE course_id = ?
                """, (data['name'], data['number_hours'], data['form_control'], data['semester'], course_id))
                conn.commit()
                conn.close()
            except Exception as e:
                QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∞:\n{e}")
            self.load_courses()


    def delete_course(self):
        selected = self.table.selectedItems()
        if not selected:
            QMessageBox.warning(self, "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
            return

        row = selected[0].row()
        course_id = int(self.table.item(row, 0).text())

        reply = QMessageBox.question(self, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å?",
                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            try:
                conn = sqlite3.connect("Student.db")
                cursor = conn.cursor()
                cursor.execute("DELETE FROM Course WHERE course_id = ?", (course_id,))
                conn.commit()
                conn.close()
            except Exception as e:
                QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç:\n{e}")
            self.load_courses()


    def filter_courses(self):
        semester, ok = QInputDialog.getText(self, "–§—ñ–ª—å—Ç—Ä", "–í–≤–µ–¥—ñ—Ç—å —Å–µ–º–µ—Å—Ç—Ä –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó (–∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è):")
        if ok:
            if semester.strip() == "":
                self.filter_semester = None
            else:
                self.filter_semester = semester.strip()
            self.load_courses()

    def show_all_courses(self):
        self.filter_semester = None
        self.load_courses()

    def sort_courses(self):
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑ combo box
        fields = ["ID", "–ù–∞–∑–≤–∞", "–ì–æ–¥–∏–Ω–∏", "–§–æ—Ä–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é", "–°–µ–º–µ—Å—Ç—Ä"]
        field = self.sort_field_cb.currentText()
        field_index = fields.index(field)
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ø—Ä—è–º–∫—É —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        direction = self.sort_order_cb.currentText()
        sort_order = Qt.AscendingOrder if direction == "–ó–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º" else Qt.DescendingOrder
        self.table.sortItems(field_index, sort_order)


# üìå –í–∫–ª–∞–¥–∫–∞3 "–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É"
class GradesByCourseTab(QWidget):
    def __init__(self, student_id=None):
        super().__init__()
        self.student_id = student_id
        self.initUI()

    def initUI(self):
        layout = QVBoxLayout()

        # –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—Ç—É–ø –ø–µ—Ä–µ–¥ –≥—Ä—É–ø–æ—é –≤—ñ–¥–∂–µ—Ç—ñ–≤
        layout.addSpacing(20)

        # –í–∏–±—ñ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
        course_layout = QHBoxLayout()
        course_label = QLabel("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç:")
        self.course_dropdown = QComboBox()
        self.course_dropdown.setFixedWidth(300)
        self.course_dropdown.currentIndexChanged.connect(self.load_grades)

        course_layout.addWidget(course_label, 0, Qt.AlignLeft)
        course_layout.addSpacing(20)
        self.course_dropdown.setMinimumWidth(250)
        course_layout.addWidget(self.course_dropdown, 0, Qt.AlignLeft)
        course_layout.addStretch()
        layout.addLayout(course_layout)

        # –í—ñ–¥—Å—Ç—É–ø –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏ –≤—ñ–¥–∂–µ—Ç—ñ–≤
        layout.addSpacing(20)

        # üîê –¢—ñ–ª—å–∫–∏ –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤/—Å–µ–∫—Ä–µ—Ç–∞—Ä—ñ–≤: –≥—Ä—É–ø–∞ + –¥–∞—Ç–∞
        if not self.student_id:
            group_date_layout = QHBoxLayout()

            # –í–∏–±—ñ—Ä –≥—Ä—É–ø–∏
            group_label = QLabel("–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É:")
            self.group_dropdown = QComboBox()
            self.group_dropdown.setFixedWidth(150)
            self.group_dropdown.addItems(["–ö–Ü-21-01", "–ö–Ü-21-02"])
            self.group_dropdown.currentIndexChanged.connect(self.load_grades)

            # –ü–æ–ª–µ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏
            date_label = QLabel("–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–æ–ª—é:")
            self.date_picker = QDateEdit()
            self.date_picker.setCalendarPopup(True)
            self.date_picker.setDate(QDate.currentDate())

            # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–∂–µ—Ç–∏ –∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º–∏ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏
            group_date_layout.addWidget(group_label, 0, Qt.AlignLeft)
            group_date_layout.addSpacing(20)
            group_date_layout.addWidget(self.group_dropdown, 0, Qt.AlignLeft)
            group_date_layout.addSpacing(40)
            group_date_layout.addWidget(date_label, 0, Qt.AlignLeft)
            group_date_layout.addSpacing(20)
            group_date_layout.addWidget(self.date_picker, 0, Qt.AlignLeft)
            group_date_layout.addStretch()

            layout.addLayout(group_date_layout)

        # –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—Ç—É–ø –ø—ñ—Å–ª—è –≥—Ä—É–ø–∏ –≤—ñ–¥–∂–µ—Ç—ñ–≤
        layout.addSpacing(20)


        # # –¢–∞–±–ª–∏—Ü—è –∑ –æ—Ü—ñ–Ω–∫–∞–º–∏
        # self.table = QTableWidget()
        # self.table.setEditTriggers(QAbstractItemView.AllEditTriggers)  # –î–æ–∑–≤–æ–ª—è—î —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        # layout.addWidget(self.table)
        # layout.addSpacing(20)
        # # –ö–Ω–æ–ø–∫–∏ "–ó–±–µ—Ä–µ–≥—Ç–∏ –æ—Ü—ñ–Ω–∫–∏" —Ç–∞ "–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥–æ–º—ñ—Å—Ç—å"
        # btn_layout = QHBoxLayout()
        # btn_layout.addSpacing(20)
        
        # self.save_grades_btn = QPushButton("–ó–±–µ—Ä–µ–≥—Ç–∏ –æ—Ü—ñ–Ω–∫–∏")
        # self.export_button = QPushButton("–í—ñ–¥–æ–º—ñ—Å—Ç—å")
        

        # for btn in (self.save_grades_btn, self.export_button):
        #     btn.setFixedSize(150, 30)
        #     btn.setStyleSheet("background-color: #4CAF50; color: white; border-radius: 5px; font-size: 16px")

        # btn_layout = QHBoxLayout()
        # btn_layout.addWidget(self.save_grades_btn)
        # # –î–æ–¥–∞—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º—ñ–∂–æ–∫ 40 –ø—ñ–∫—Å–µ–ª—ñ–≤
        # btn_layout.addSpacing(40)
        

        # btn_layout.addStretch()  # –î–æ–¥–∞—î–º–æ —Ä–æ–∑—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤–æ—Ä—É—á, —â–æ–± –∫–Ω–æ–ø–∫–∏ –ª–∏—à–∏–ª–∏—Å—è –∑–ª—ñ–≤–∞
       
        # layout.addLayout(btn_layout)

        # self.setLayout(layout)
        # layout.addSpacing(20)

        # # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø–æ–¥—ñ–π
        # self.save_grades_btn.clicked.connect(self.save_grades)
        # self.export_button.clicked.connect(self.export_to_excel)

        # –î–æ–¥–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é
        self.table = QTableWidget()
        self.table.setEditTriggers(QAbstractItemView.AllEditTriggers)
        layout.addWidget(self.table)

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ª–∏—à–µ —è–∫—â–æ –Ω–µ —Å—Ç—É–¥–µ–Ω—Ç
        btn_layout = QHBoxLayout()

        if not self.student_id:
            self.save_grades_btn = QPushButton("–ó–±–µ—Ä–µ–≥—Ç–∏ –æ—Ü—ñ–Ω–∫–∏")
            self.export_button = QPushButton("–í—ñ–¥–æ–º—ñ—Å—Ç—å")

            for btn in (self.save_grades_btn, self.export_button):
                btn.setFixedSize(150, 30)
                btn.setStyleSheet("background-color: #4CAF50; color: white; border-radius: 5px; font-size: 16px")

            btn_layout.addWidget(self.save_grades_btn)
            btn_layout.addSpacing(40)
            btn_layout.addWidget(self.export_button)

            # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤
            self.save_grades_btn.clicked.connect(self.save_grades)
            self.export_button.clicked.connect(self.export_to_excel)

        btn_layout.addStretch()
        layout.addLayout(btn_layout)

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ layout –≤–∫—ñ–Ω—Ü—ñ
        self.setLayout(layout)

        self.load_courses()


    def load_grades(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ—Ü—ñ–Ω–æ–∫ –ø–æ –≤–∏–±—Ä–∞–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É"""
        course_id = self.course_dropdown.currentData()

        # –û—Ç—Ä–∏–º–∞—Ç–∏ group_name —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –Ω–µ —Å—Ç—É–¥–µ–Ω—Ç
        group_name = self.group_dropdown.currentText() if hasattr(self, "group_dropdown") else None

        if course_id is None and not self.student_id:
            return  # –î–ª—è –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –ø–æ—Ç—Ä—ñ–±–µ–Ω –≤–∏–±—Ä–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç

        conn = sqlite3.connect("Student.db")
        cursor = conn.cursor()

        grades = []
        columns = []

        if self.student_id:
            if course_id is None:
                # üîπ –í—Å—ñ –æ—Ü—ñ–Ω–∫–∏ –ø–æ –≤—Å—ñ—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑ –Ω–æ–º–µ—Ä–æ–º —Å–µ–º–µ—Å—Ç—Ä—É
                cursor.execute("""
                    SELECT C.semester, C.name, G.grade
                    FROM Grades G
                    JOIN Course C ON G.course_id = C.course_id
                    WHERE G.student_id = ?
                    ORDER BY C.semester ASC
                """, (self.student_id,))
                raw_data = cursor.fetchall()

                # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –æ—Ü—ñ–Ω–æ–∫ –ø–æ —Å–µ–º–µ—Å—Ç—Ä–∞—Ö
                from collections import defaultdict
                semester_data = defaultdict(list)
                for semester, name, grade in raw_data:
                    semester_data[semester].append((name, grade))

                # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –æ—Ü—ñ–Ω–æ–∫ —ñ–∑ —Å–µ—Ä–µ–¥–Ω—ñ–º–∏
                for semester in sorted(semester_data.keys()):
                    subjects = semester_data[semester]
                    for name, grade in subjects:
                        grades.append((semester, name, grade))

                    # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –±–∞–ª—É
                    grades_in_semester = [g for _, g in subjects if isinstance(g, (int, float))]
                    if grades_in_semester:
                        avg = round(sum(grades_in_semester) / len(grades_in_semester), 2)
                        grades.append((semester, "–°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª:", avg))
                    else:
                        grades.append((semester, "–°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª:", "-"))

                columns = ["–°–µ–º–µ—Å—Ç—Ä", "–ü—Ä–µ–¥–º–µ—Ç", "–û—Ü—ñ–Ω–∫–∞"]
            else:
                # üîπ –û—Ü—ñ–Ω–∫–∏ –ª–∏—à–µ –ø–æ –≤–∏–±—Ä–∞–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
                cursor.execute("""
                    SELECT S.last_name, S.first_name, S.middle_name, G.grade
                    FROM Grades G
                    JOIN Student_info S ON G.student_id = S.student_id
                    WHERE G.course_id = ? AND G.student_id = ?
                    ORDER BY S.last_name ASC
                """, (course_id, self.student_id))
                grades = cursor.fetchall()
                columns = ["–ü—Ä—ñ–∑–≤–∏—â–µ", "–Ü–º'—è", "–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ", "–û—Ü—ñ–Ω–∫–∞"]
        else:
            # üîπ –î–ª—è –≤–∏–∫–ª–∞–¥–∞—á–∞/—Å–µ–∫—Ä–µ—Ç–∞—Ä—è ‚Äî –æ—Ü—ñ–Ω–∫–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É —ñ –≥—Ä—É–ø—ñ
            cursor.execute("""
                SELECT S.student_id, S.last_name, S.first_name, S.middle_name, COALESCE(G.grade, '') 
                FROM Student_info S
                LEFT JOIN Grades G ON S.student_id = G.student_id AND G.course_id = ?
                WHERE S.group_name = ?
                ORDER BY S.last_name ASC
            """, (course_id, group_name))
            grades = cursor.fetchall()
            columns = ["ID", "–ü—Ä—ñ–∑–≤–∏—â–µ", "–Ü–º'—è", "–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ", "–û—Ü—ñ–Ω–∫–∞"]

        conn.close()

        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
        self.table.clear()
        self.table.setRowCount(len(grades))
        self.table.setColumnCount(len(columns))
        self.table.setHorizontalHeaderLabels(columns)

        for row, grade in enumerate(grades):
            for col, data in enumerate(grade):
                item = QTableWidgetItem(str(data))

                # üîç –í–∏–¥—ñ–ª–µ–Ω–Ω—è –¥–ª—è "–°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª:"
                if len(grade) >= 2 and str(grade[1]) == "–°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª:":
                    font = item.font()
                    font.setBold(True)
                    item.setFont(font)
                    item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
                    item.setBackground(QColor("#D0F0C0"))

                # üîí –î–æ–∑–≤—ñ–ª —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ª–∏—à–µ –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤
                if columns[col] == "–û—Ü—ñ–Ω–∫–∞" and not self.student_id:
                    item.setFlags(item.flags() | Qt.ItemIsEditable)
                else:
                    item.setFlags(item.flags() & ~Qt.ItemIsEditable)

                self.table.setItem(row, col, item)

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∂–∏–º—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        if not self.student_id and "ID" in columns:
            self.table.setColumnHidden(0, True)
            self.table.setEditTriggers(QAbstractItemView.AllEditTriggers)
        else:
            self.table.setEditTriggers(QAbstractItemView.NoEditTriggers)

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à–∏—Ä–∏–Ω–∏ –∫–æ–ª–æ–Ω–æ–∫
        for i, width in enumerate([120, 300, 300,300][:len(columns)]):
            self.table.setColumnWidth(i, width)

        self.table.horizontalHeader().setStyleSheet(
            "QHeaderView::section { background-color: #4CAF50; color: white; font-size: 16px; font-weight: bold; padding: 8px; }"
        )





    def save_grades(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–Ω–µ—Å–µ–Ω–∏—Ö –æ—Ü—ñ–Ω–æ–∫ —É –±–∞–∑—É –¥–∞–Ω–∏—Ö (–¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á–∞ –∞–±–æ —Å–µ–∫—Ä–µ—Ç–∞—Ä—è)."""
        course_id = self.course_dropdown.currentData()
        if course_id is None:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –æ—Ü—ñ–Ω–æ–∫!")
            return

        # –°—Ç—É–¥–µ–Ω—Ç–∏ –Ω–µ –º–∞—é—Ç—å –ø—Ä–∞–≤–∞ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, —Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ –¥—ñ—é
        if hasattr(self, 'student_id') and self.student_id:
            QMessageBox.information(self, "–£–≤–∞–≥–∞", "–°—Ç—É–¥–µ–Ω—Ç–∏ –Ω–µ –º–∞—é—Ç—å –ø—Ä–∞–≤–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –æ—Ü—ñ–Ω–∫–∏.")
            return

        try:
            with sqlite3.connect("Student.db") as conn:
                cursor = conn.cursor()

                for row in range(self.table.rowCount()):
                    student_id_item = self.table.item(row, 0)  # –ü—Ä–∏—Ö–æ–≤–∞–Ω–∏–π ID
                    grade_item = self.table.item(row, self.table.columnCount() - 1)  # –û—Ü—ñ–Ω–∫–∞ = –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–æ–≤–ø–µ—Ü—å

                    if not student_id_item or not grade_item:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ä—è–¥–æ–∫ {row}: –Ω–µ–º–∞—î ID –∞–±–æ –æ—Ü—ñ–Ω–∫–∏.")
                        continue

                    student_id_text = student_id_item.text().strip()
                    grade_text = grade_item.text().strip()

                    if not student_id_text.isdigit():
                        print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID —É —Ä—è–¥–∫—É {row}: {student_id_text}")
                        continue

                    if not grade_text.isdigit():
                        QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ —É —Ä—è–¥–∫—É {row + 1}: {grade_text}. "
                                                            f"–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 12.")
                        return

                    grade = int(grade_text)
                    if not (1 <= grade <= 12):
                        QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", f"–û—Ü—ñ–Ω–∫–∞ —É —Ä—è–¥–∫—É {row + 1} ({grade}) –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ 1-12!")
                        return

                    student_id = int(student_id_text)

                    # –ó–∞–ø–∏—Å –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏
                    cursor.execute("""
                        INSERT INTO Grades (student_id, course_id, grade) 
                        VALUES (?, ?, ?)
                        ON CONFLICT(student_id, course_id) DO UPDATE SET grade = excluded.grade
                    """, (student_id, course_id, grade))

                conn.commit()

        except sqlite3.OperationalError as e:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:\n{e}")
            return

        QMessageBox.information(self, "–£—Å–ø—ñ—Ö", "–û—Ü—ñ–Ω–∫–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        self.load_grades()



    def export_to_excel(self):
        """–ï–∫—Å–ø–æ—Ä—Ç –æ—Ü—ñ–Ω–æ–∫ —É —Ñ–∞–π–ª 'vidomist.xlsx' –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –≥—Ä—É–ø–∏"""
        file_path, _ = QFileDialog.getOpenFileName(self, "–í—ñ–¥–∫—Ä–∏—Ç–∏ –≤—ñ–¥–æ–º—ñ—Å—Ç—å", "", "Excel Files (*.xlsx)")
        if not file_path:
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç —Ç–∞ –¥–∞—Ç—É
        course_id = self.course_dropdown.currentData()
        selected_date = self.date_picker.date().toString("dd.MM.yyyy")
        group_name = self.group_dropdown.currentText()  # –í–∏–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–∞

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –ø—Ä–µ–¥–º–µ—Ç —ñ–∑ —Ç–∞–±–ª–∏—Ü—ñ Course
        conn = sqlite3.connect("Student.db")
        cursor = conn.cursor()
        cursor.execute("SELECT name, number_hours FROM Course WHERE course_id = ?", (course_id,))
        course_data = cursor.fetchone()
        conn.close()

        if not course_data:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö!")
            return

        course_name, number_hours = course_data

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ—Ü—ñ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –≥—Ä—É–ø–∏ —Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        conn = sqlite3.connect("Student.db")
        cursor = conn.cursor()
        cursor.execute("""
            SELECT Student_info.last_name, Student_info.first_name, Student_info.middle_name, Grades.grade 
            FROM Grades
            JOIN Student_info ON Grades.student_id = Student_info.student_id
            WHERE Grades.course_id = ? AND Student_info.group_name = ?
        """, (course_id, group_name))
        grades = cursor.fetchall()
        conn.close()

        # –°–æ—Ä—Ç—É—î–º–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º —É –∑—Ä–æ—Å—Ç–∞—é—á–æ–º—É –ø–æ—Ä—è–¥–∫—É
        grades_sorted = sorted(grades, key=lambda x: x[0])

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ Excel —Ñ–∞–π–ª
        wb = openpyxl.load_workbook(file_path)
        sheet = wb.active

        # –ó–∞–ø–∏—Å—É—î–º–æ –¥–∞–Ω—ñ –≤ Excel
        sheet["B15"].value = course_name  # –ù–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        sheet["B13"].value = selected_date  # –î–∞—Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é
        sheet["H20"].value = number_hours  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω
        sheet["F8"].value = group_name  # –ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏

        name_range = sheet["B26:B55"]
        grade_range = sheet["E26:E55"]

        for i, (last_name, first_name, middle_name, grade) in enumerate(grades_sorted):
            if i >= 30:
                break
            # –§–æ—Ä–º—É—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª–∏ (–ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª–∏)
            initials = f"{last_name} {first_name[0]}.{middle_name[0]}."
            name_range[i][0].value = initials

            # –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –æ—Ü—ñ–Ω–∫—É —è–∫ —Ü—ñ–ª–µ —á–∏—Å–ª–æ
            grade_range[i][0].value = int(grade) if grade is not None else ""

        # –Ø–∫—â–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –º–µ–Ω—à–µ, –Ω—ñ–∂ 30, –∑–∞–ª–∏—à–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏
        for i in range(len(grades_sorted), 30):
            name_range[i][0].value = ""
            grade_range[i][0].value = ""

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
        save_path, _ = QFileDialog.getSaveFileName(self, "–ó–±–µ—Ä–µ–≥—Ç–∏ –≤—ñ–¥–æ–º—ñ—Å—Ç—å", "vidomist.xlsx", "Excel Files (*.xlsx)")
        if save_path:
            wb.save(save_path)
            QMessageBox.information(self, "–£—Å–ø—ñ—Ö", f"–í—ñ–¥–æ–º—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–æ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞!")


    def load_courses(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ —É –≤–∏–ø–∞–¥–∞—é—á–∏–π —Å–ø–∏—Å–æ–∫ (–∑ –æ–ø—Ü—ñ—î—é '—É—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏')"""
        conn = sqlite3.connect("Student.db")
        cursor = conn.cursor()

        cursor.execute("SELECT course_id, name FROM Course ORDER BY name ASC")
        courses = cursor.fetchall()
        conn.close()

        self.course_dropdown.clear()
        self.course_dropdown.addItem("–£—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏", None)  # <--- –ø–µ—Ä—à–∏–π –ø—É–Ω–∫—Ç

        for course_id, name in courses:
            self.course_dropdown.addItem(name, course_id)




# üìå –í–∫–ª–∞–¥–∫–∞4 "–†–µ–π—Ç–∏–Ω–≥"
class RatingTab(QWidget):
    def __init__(self, readonly=False):
        super().__init__()
        self.readonly = readonly
        self.initUI()

    def initUI(self):
        layout = QVBoxLayout()

        # –í–µ—Ä—Ö–Ω—ñ–π —Ä—è–¥–æ–∫: –í–∏–±—ñ—Ä —Å–µ–º–µ—Å—Ç—Ä—É + –í–∏–±—ñ—Ä –≥—Ä—É–ø–∏
        top_layout = QHBoxLayout()
        layout.addSpacing(20)  # –î–æ–¥–∞—î –≤—ñ–¥—Å—Ç—É–ø —É 20 –ø—ñ–∫—Å–µ–ª—ñ–≤ –∑–≤–µ—Ä—Ö—É
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –º–∞–∫–µ—Ç—É –¥–ª—è –≤–∏–±–æ—Ä—É —Å–µ–º–µ—Å—Ç—Ä–∞ —Ç–∞ –≥—Ä—É–ø–∏
        top_layout = QHBoxLayout()

        # –õ–µ–π–±–ª —ñ –∫–æ–º–±–æ–±–æ–∫—Å –¥–ª—è —Å–µ–º–µ—Å—Ç—Ä–∞
        semester_label = QLabel("–í–∏–±—ñ—Ä —Å–µ–º–µ—Å—Ç—Ä–∞:")
        self.semester_cb = QComboBox()
        self.semester_cb.setFixedWidth(80)  
        self.semester_cb.addItem("–£—Å—ñ", None)
        for i in range(1, 9):
            self.semester_cb.addItem(str(i), i)

        # –õ–µ–π–±–ª —ñ –∫–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –≥—Ä—É–ø–∏
        group_label = QLabel("–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É:")
        self.group_cb = QComboBox()
        self.group_cb.setFixedWidth(100)  
        self.group_cb.addItems(["—É—Å—ñ", "–ö–Ü-21-01", "–ö–Ü-21-02"])

        # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–∂–µ—Ç–∏ –≤ –º–∞–∫–µ—Ç
        top_layout.addWidget(semester_label, 0, Qt.AlignLeft)
        top_layout.addWidget(self.semester_cb, 0, Qt.AlignLeft)
        top_layout.addSpacing(40)  # –í—ñ–¥—Å—Ç–∞–Ω—å 40px –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        top_layout.addWidget(group_label, 0, Qt.AlignLeft)
        top_layout.addWidget(self.group_cb, 0, Qt.AlignLeft)

        # –î–æ–¥–∞—î–º–æ —Ä–æ–∑—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤–æ—Ä—É—á, —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤–∏—Ä—ñ–≤–Ω—è–Ω–∏–º–∏ –≤–ª—ñ–≤–æ
        top_layout.addStretch()

        layout.addLayout(top_layout)

        layout.addSpacing(20)

        filter_layout = QHBoxLayout()

        # –õ–µ–π–±–ª —ñ –ø–æ–ª–µ –¥–ª—è –≤—ñ–¥—Å–æ—Ç–∫–∞ –Ω–∞ —Å—Ç–∏–ø–µ–Ω–¥—ñ—é
        scholarship_label = QLabel("–í—ñ–¥—Å–æ—Ç–æ–∫ –Ω–∞ —Å—Ç–∏–ø–µ–Ω–¥—ñ—é:")
        self.scholarship_le = QLineEdit()
        self.scholarship_le.setFixedWidth(80)
        self.scholarship_le.setPlaceholderText("–ù–∞–ø—Ä. 30")

        # –ö–Ω–æ–ø–∫–∏
        self.list_btn = QPushButton("–°–ø–∏—Å–æ–∫")
        self.show_all_btn = QPushButton("–ü–æ–∫–∞–∑–∞—Ç–∏ —É—Å—ñ—Ö")

        btn_size = (120, 30)
        style = "background-color: #4CAF50; color: white; border: none; border-radius: 5px; font-size: 16px"
        for btn in (self.list_btn, self.show_all_btn):
            btn.setFixedSize(*btn_size)
            btn.setStyleSheet(style)

        # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–∂–µ—Ç–∏ –¥–æ –º–∞–∫–µ—Ç—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏
        filter_layout.addWidget(scholarship_label, 0, Qt.AlignLeft)
        filter_layout.addWidget(self.scholarship_le, 0, Qt.AlignLeft)
        filter_layout.addSpacing(40)  # –í—ñ–¥—Å—Ç—É–ø –ø–µ—Ä–µ–¥ –ø–µ—Ä—à–æ—é –∫–Ω–æ–ø–∫–æ—é
        filter_layout.addWidget(self.list_btn, 0, Qt.AlignLeft)
        filter_layout.addSpacing(40)  # –í—ñ–¥—Å—Ç—É–ø –ø–µ—Ä–µ–¥ –¥—Ä—É–≥–æ—é –∫–Ω–æ–ø–∫–æ—é
        filter_layout.addWidget(self.show_all_btn, 0, Qt.AlignLeft)

        # –î–æ–¥–∞—î–º–æ —Ä–æ–∑—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤–æ—Ä—É—á –¥–ª—è –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –ø–æ –ª—ñ–≤–æ–º—É –∫—Ä–∞—é
        filter_layout.addStretch()

        layout.addLayout(filter_layout)

        layout.addSpacing(20)

      

        # –¢–∞–±–ª–∏—Ü—è —Ä–µ–π—Ç–∏–Ω–≥—É
        self.table = QTableWidget()
        self.table.setColumnCount(2)
        self.table.setHorizontalHeaderLabels(["–°—Ç—É–¥–µ–Ω—Ç", "–°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª"])
        layout.addWidget(self.table)
        self.table.setColumnWidth(0, 150)
        self.table.setColumnWidth(1, 80)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –±–∞–ª—É —Ç–∞ –∫–Ω–æ–ø–∫–∏ –µ–∫—Å–ø–æ—Ä—Ç—É
        bottom_layout = QHBoxLayout()
        
        self.avg_label = QLabel("–ó–∞–≥–∞–ª—å–Ω–∏–π —Å–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª: -")
        self.avg_label.setStyleSheet("font-size: 16px; font-weight: bold; color: #333; background-color: #f0f0f0; padding: 6px; border-radius: 5px;")
        self.avg_label.setAlignment(Qt.AlignCenter)
        bottom_layout.addWidget(self.avg_label, 2)

        self.export_btn = QPushButton("–ï–∫—Å–ø–æ—Ä—Ç –≤ Excel")
        self.export_btn.setStyleSheet("background-color: #4CAF50; color: white; font-size: 14px; font-weight: bold; padding: 8px; border-radius: 5px;")
        self.export_btn.setFixedSize(130, 30)  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –∫–Ω–æ–ø–∫–∏
        bottom_layout.addWidget(self.export_btn, 1)

        btn_size = (120, 30)
        
        layout.addLayout(bottom_layout)
        

        self.setLayout(layout)

        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤
        self.semester_cb.currentIndexChanged.connect(self.load_ratings)
        self.group_cb.currentIndexChanged.connect(self.load_ratings)
        self.list_btn.clicked.connect(self.apply_percentage_filter)
        self.show_all_btn.clicked.connect(self.load_ratings)
        self.export_btn.clicked.connect(self.export_to_excel)

        self.load_ratings()

    def load_groups(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø —ñ–∑ –ë–î —Ç–∞ –¥–æ–¥–∞—î –æ–ø—Ü—ñ—é '—É—Å—ñ'."""
        conn = sqlite3.connect("Student.db")
        cursor = conn.cursor()
        cursor.execute("SELECT DISTINCT group_name FROM Student_info ORDER BY group_name")
        groups = cursor.fetchall()
        conn.close()

        self.group_cb.clear()
        self.group_cb.addItem("—É—Å—ñ", "—É—Å—ñ")  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è "—É—Å—ñ"

        for group in groups:
            self.group_cb.addItem(group[0], group[0])  # –î–æ–¥–∞—î–º–æ –≥—Ä—É–ø–∏ –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º group_name

    def load_ratings(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Å–µ–º–µ—Å—Ç—Ä—É —Ç–∞ –≥—Ä—É–ø–∏."""
        semester = self.semester_cb.currentData()  # –í–∏–±—ñ—Ä —Å–µ–º–µ—Å—Ç—Ä—É
        group = self.group_cb.currentText()  # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –≤–∏–±—Ä–∞–Ω–æ—ó –≥—Ä—É–ø–∏ (–∑–∞–º—ñ—Å—Ç—å currentData)

        conn = sqlite3.connect("Student.db")
        cursor = conn.cursor()

        query = """
            SELECT S.last_name || ' ' || substr(S.first_name, 1, 1) || '.' 
                || CASE WHEN S.middle_name IS NOT NULL THEN substr(S.middle_name, 1, 1) || '.' ELSE '' END AS student_name,
                COALESCE(AVG(G.grade), 0) AS avg_grade
            FROM Student_info S
            LEFT JOIN Grades G ON S.student_id = G.student_id
            LEFT JOIN Course C ON G.course_id = C.course_id
        """
        conditions = []
        params = []

        if semester is not None:
            conditions.append("C.semester = ?")
            params.append(semester)

        if group and group != "—É—Å—ñ":  # –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –≥—Ä—É–ø–∞
            conditions.append("S.group_name = ?")
            params.append(group)

        if conditions:
            query += " WHERE " + " AND ".join(conditions)

        query += " GROUP BY S.student_id ORDER BY avg_grade DESC"

        cursor.execute(query, params)
        results = cursor.fetchall()
        conn.close()

        self.rating_results = results
        self.populate_table(results)
        self.calculate_average(results)



    def populate_table(self, results):
        """–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ —Ç–∞ —ó—Ö–Ω—ñ–º —Å–µ—Ä–µ–¥–Ω—ñ–º –±–∞–ª–æ–º."""
        self.table.setRowCount(len(results))
        for i, (student_name, avg_grade) in enumerate(results):
            self.table.setItem(i, 0, QTableWidgetItem(student_name))
            grade_text = "–ù–µ–º–∞—î –æ—Ü—ñ–Ω–æ–∫" if avg_grade is None else f"{avg_grade:.2f}"
            self.table.setItem(i, 1, QTableWidgetItem(grade_text))

        # self.table.resizeColumnsToContents()
        self.table.horizontalHeader().setStyleSheet(
            "QHeaderView::section { background-color: #4CAF50; color: white; font-size: 16px; font-weight: bold; padding: 8px; }"
        )
        self.table.setColumnWidth(0, 250)
        self.table.setColumnWidth(1, 150)

    def calculate_average(self, results):
        """–û–±—á–∏—Å–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –±–∞–ª—É."""
        grades = [grade for _, grade in results if grade is not None]
        avg_score = sum(grades) / len(grades) if grades else None
        self.avg_label.setText(f"–ó–∞–≥–∞–ª—å–Ω–∏–π —Å–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª: {avg_score:.2f}" if avg_score else "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")

    def apply_percentage_filter(self):
        """–§—ñ–ª—å—Ç—Ä—É—î —Ä–µ–π—Ç–∏–Ω–≥, –ø–æ–∫–∞–∑—É—é—á–∏ —Ç—ñ–ª—å–∫–∏ —Ç–æ–ø X% —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤."""
        try:
            percent = float(self.scholarship_le.text().strip())
            if not (0 <= percent <= 100):
                raise ValueError
        except ValueError:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ 0 –¥–æ 100!")
            return

        count = math.ceil(len(self.rating_results) * (percent / 100))
        filtered_results = self.rating_results[:count]
        self.populate_table(filtered_results)
        self.calculate_average(filtered_results)

    def export_to_excel(self):
        """–ï–∫—Å–ø–æ—Ä—Ç—É—î —Ä–µ–π—Ç–∏–Ω–≥ —É —Ñ–∞–π–ª Excel."""
        file_path, _ = QFileDialog.getSaveFileName(self, "–ó–±–µ—Ä–µ–≥—Ç–∏ —è–∫", "", "Excel Files (*.xlsx)")
        if not file_path:
            return

        data = [[self.table.item(row, 0).text(), self.table.item(row, 1).text()]
                for row in range(self.table.rowCount())]

        df = pd.DataFrame(data, columns=["–°—Ç—É–¥–µ–Ω—Ç", "–°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª"])
        df.to_excel(file_path, index=False)

        QMessageBox.information(self, "–ï–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ –≤ Excel!")




# üìå –í–∫–ª–∞–¥–∫–∞5 "–í–Ω–µ—Å–µ–Ω–Ω—è –æ—Ü—ñ–Ω–æ–∫"
class GradeEntryTab(QWidget):
    def __init__(self, student_id=None):
        super().__init__()
        self.student_id = student_id
        self.initUI()
        
    def initUI(self):
        main_layout = QVBoxLayout()
        
        # –í–µ—Ä—Ö–Ω—ñ–π –±–ª–æ–∫: –≤–∏–±—ñ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞
        main_layout.addSpacing(20)  # –î–æ–¥–∞—î –≤—ñ–¥—Å—Ç—É–ø —É 20 –ø—ñ–∫—Å–µ–ª—ñ–≤ –∑–≤–µ—Ä—Ö—É
        top_layout = QHBoxLayout()
        top_layout.addWidget(QLabel("–°—Ç—É–¥–µ–Ω—Ç:"))
        top_layout.addSpacing(40)
        self.student_cb = QComboBox()
        top_layout.addWidget(self.student_cb)
        main_layout.addLayout(top_layout)
        main_layout.addSpacing(20)  # –î–æ–¥–∞—î –≤—ñ–¥—Å—Ç—É–ø —É 20 –ø—ñ–∫—Å–µ–ª—ñ–≤ –∑–≤–µ—Ä—Ö—É
        top_layout.addStretch()
        
        # –¢–∞–±–ª–∏—Ü—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
        self.table = QTableWidget()
        self.table.setColumnCount(4)
        self.table.setHorizontalHeaderLabels(["ID", "–ü—Ä–µ–¥–º–µ—Ç", "–°–µ–º–µ—Å—Ç—Ä", "–û—Ü—ñ–Ω–∫–∞"])
        self.table.setColumnHidden(0, True)

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω—É —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        self.table.setColumnWidth(0, 50)   # ID
        self.table.setColumnWidth(1, 200)  # –ü—Ä–µ–¥–º–µ—Ç
        self.table.setColumnWidth(2, 100)  # –°–µ–º–µ—Å—Ç—Ä
        self.table.setColumnWidth(2, 60)   # –û—Ü—ñ–Ω–∫–∞

        main_layout.addWidget(self.table)


        self.table.horizontalHeader().setStyleSheet(
            "QHeaderView::section { background-color: #4CAF50; color: white; font-size: 16px; font-weight: bold; padding: 8px; }"
        )

        
        # –ö–Ω–æ–ø–∫–∞ "–ó–±–µ—Ä–µ–≥—Ç–∏ –æ—Ü—ñ–Ω–∫–∏"
        main_layout.addSpacing(20)
        btn_layout = QHBoxLayout()
        self.save_btn = QPushButton("–ó–±–µ—Ä–µ–≥—Ç–∏ –æ—Ü—ñ–Ω–∫–∏")
        self.export_btn = QPushButton("–ï–∫—Å–ø–æ—Ä—Ç –≤ Excel")
        self.save_btn.setFixedSize(140, 30)
        self.export_btn.setFixedSize(140, 30)

        self.save_btn.setStyleSheet("background-color: #4CAF50; color: white; border: none; border-radius: 5px;font-size:16px")
        self.export_btn.setStyleSheet("background-color: #4CAF50; color: white; border: none; border-radius: 5px;font-size:16px")
        btn_layout.addWidget(self.save_btn)
        btn_layout.addSpacing(40)  # –í—ñ–¥—Å—Ç—É–ø –ø–µ—Ä–µ–¥ –ø–µ—Ä—à–æ—é –∫–Ω–æ–ø–∫–æ—é
        btn_layout.addWidget(self.export_btn)
        main_layout.addLayout(btn_layout)
        main_layout.addSpacing(20)
        
        self.setLayout(main_layout)
        btn_layout.addStretch()
        
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —ñ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
        self.load_students()
        self.student_cb.currentIndexChanged.connect(self.load_courses_for_student)
        self.save_btn.clicked.connect(self.save_grades)
        self.export_btn.clicked.connect(self.export_to_excel)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–µ–¥–º–µ—Ç–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ (—è–∫—â–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π)
        if self.student_cb.count() > 0:
            self.load_courses_for_student()
    
    def load_students(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –≤–∏–ø–∞–¥–∞—é—á–∏–π —Å–ø–∏—Å–æ–∫."""
        conn = sqlite3.connect("Student.db")
        cursor = conn.cursor()
        cursor.execute("""
            SELECT student_id, last_name, first_name 
            FROM Student_info 
            ORDER BY last_name ASC
        """)
        students = cursor.fetchall()
        conn.close()

        self.student_cb.clear()
        for s in students:
            # –§–æ—Ä–º—É—î–º–æ —Ä—è–¥–æ–∫ —Ç–∏–ø—É "–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è"
            self.student_cb.addItem(f"{s[1]} {s[2]}", s[0])

        
        
    def load_courses_for_student(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —É—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü—é, –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞ —Å–µ–º–µ—Å—Ç—Ä–æ–º, –∑ —É–∂–µ –≤–Ω–µ—Å–µ–Ω–∏–º–∏ –æ—Ü—ñ–Ω–∫–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞."""
        student_id = self.student_cb.currentData()
        conn = sqlite3.connect("Student.db")
        cursor = conn.cursor()

        # –ó–∞–ø–∏—Ç –ø–æ–≤–µ—Ä—Ç–∞—î ID –ø—Ä–µ–¥–º–µ—Ç–∞, –Ω–∞–∑–≤—É, –æ—Ü—ñ–Ω–∫—É, —Å–µ–º–µ—Å—Ç—Ä —ñ —Ñ–æ—Ä–º—É –∫–æ–Ω—Ç—Ä–æ–ª—é, –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞ —Å–µ–º–µ—Å—Ç—Ä–æ–º
        cursor.execute("""
            SELECT Course.course_id, Course.name, 
                (SELECT grade FROM Grades WHERE student_id = ? AND course_id = Course.course_id LIMIT 1),
                Course.semester, Course.form_control
            FROM Course
            ORDER BY Course.semester, Course.course_id
        """, (student_id,))

        courses = cursor.fetchall()
        conn.close()

        self.table.setRowCount(len(courses))

        for row, course in enumerate(courses):
            course_id, course_name, grade, semester, form_control = course

            # ID –ø—Ä–µ–¥–º–µ—Ç–∞ (–Ω–µ —Ä–µ–¥–∞–≥—É—î—Ç—å—Å—è)
            item_id = QTableWidgetItem(str(course_id))
            item_id.setFlags(item_id.flags() & ~Qt.ItemIsEditable)
            self.table.setItem(row, 0, item_id)

            # –ù–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ (–Ω–µ —Ä–µ–¥–∞–≥—É—î—Ç—å—Å—è, –∑ –ø—ñ–¥–∫–∞–∑–∫–æ—é)
            item_name = QTableWidgetItem(course_name)
            item_name.setFlags(item_name.flags() & ~Qt.ItemIsEditable)
            item_name.setToolTip(f"–°–µ–º–µ—Å—Ç—Ä: {semester}\n–§–æ—Ä–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é: {form_control}")
            self.table.setItem(row, 1, item_name)

            # –°–µ–º–µ—Å—Ç—Ä (–Ω–µ —Ä–µ–¥–∞–≥—É—î—Ç—å—Å—è)
            item_semester = QTableWidgetItem(str(semester))
            item_semester.setFlags(item_semester.flags() & ~Qt.ItemIsEditable)
            self.table.setItem(row, 2, item_semester)

            # –û—Ü—ñ–Ω–∫–∞ (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –≤–≤–æ–¥–∏—Ç–∏ –∞–±–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è)
            grade_val = "" if grade is None else str(grade)
            item_grade = QTableWidgetItem(grade_val)
            self.table.setItem(row, 3, item_grade)

        self.table.resizeColumnsToContents()




    def save_grades(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–≤–µ–¥–µ–Ω—ñ –æ—Ü—ñ–Ω–∫–∏, –ø–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö."""
        student_id = self.student_cb.currentData()
        rows = self.table.rowCount()
        conn = sqlite3.connect("Student.db")
        cursor = conn.cursor()
        for row in range(rows):
            course_id = int(self.table.item(row, 0).text())
            grade_text = self.table.item(row, 2).text().strip()
            cursor.execute("DELETE FROM Grades WHERE student_id = ? AND course_id = ?", (student_id, course_id))
            if grade_text != "":
                try:
                    grade_val = int(grade_text)
                    if not (1 <= grade_val <= 12):
                        raise ValueError("–û—Ü—ñ–Ω–∫–∞ –º–∞—î –±—É—Ç–∏ –≤ –º–µ–∂–∞—Ö 1-12!")
                except ValueError:
                    QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", f"–û—Ü—ñ–Ω–∫–∞ –≤ —Ä—è–¥–∫—É {row+1} –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º –≤—ñ–¥ 1 –¥–æ 12!")
                    conn.rollback()
                    conn.close()
                    return
                cursor.execute("INSERT INTO Grades (student_id, course_id, grade) VALUES (?, ?, ?)",
                               (student_id, course_id, grade_val))
        conn.commit()
        conn.close()
        QMessageBox.information(self, "–£—Å–ø—ñ—Ö", "–û—Ü—ñ–Ω–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        self.load_courses_for_student()
                
        
    def export_to_excel(self):
        """–ï–∫—Å–ø–æ—Ä—Ç—É—î –æ—Ü—ñ–Ω–∫–∏ —É —Ñ–∞–π–ª Excel."""
        student_id = self.student_cb.currentData()
        student_name = self.student_cb.currentText()
        conn = sqlite3.connect("Student.db")
        cursor = conn.cursor()
        cursor.execute("""
            SELECT Course.name, Grades.grade 
            FROM Grades 
            JOIN Course ON Grades.course_id = Course.course_id 
            WHERE Grades.student_id = ?
        """, (student_id,))
        data = cursor.fetchall()
        conn.close()
        
        if not data:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ–º–∞—î –æ—Ü—ñ–Ω–æ–∫ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É!")
            return
        
        df = pd.DataFrame(data, columns=["–ü—Ä–µ–¥–º–µ—Ç", "–û—Ü—ñ–Ω–∫–∞"])
        filename = f"{student_name}_–æ—Ü—ñ–Ω–∫–∏.xlsx"
        df.to_excel(filename, index=False)
        QMessageBox.information(self, "–£—Å–ø—ñ—Ö", f"–§–∞–π–ª '{filename}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")



# üìå –ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–∏
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QTabWidget

class MainApp(QWidget):
    def __init__(self, user_data):
        super().__init__()
        self.user_data = user_data
        self.position = user_data["position"]
        self.initUI()

    def initUI(self):
        self.setWindowTitle("–°–∏—Å—Ç–µ–º–∞ –æ–±–ª—ñ–∫—É —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤")
        self.resize(1200, 800)

        layout = QVBoxLayout()
        self.tabs = QTabWidget()

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–ª—ñ
        if self.position in ("—Å–µ–∫—Ä–µ—Ç–∞—Ä", "–∑–∞–≤–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è–º"):
            self.tabs.addTab(StudentInfoTab(), "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤")
            self.tabs.addTab(CoursesTab(), "–ü—Ä–µ–¥–º–µ—Ç–∏")
            self.tabs.addTab(GradesByCourseTab(), "–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É")
            self.tabs.addTab(RatingTab(), "–†–µ–π—Ç–∏–Ω–≥")
            self.tabs.addTab(GradeEntryTab(), "–í–Ω–µ—Å–µ–Ω–Ω—è –æ—Ü—ñ–Ω–æ–∫")
        elif self.position == "—Å—Ç—É–¥–µ–Ω—Ç":
            self.tabs.addTab(GradesByCourseTab(student_id=self.user_data["id"]), "–ú–æ—ó –æ—Ü—ñ–Ω–∫–∏")
            self.change_pwd_btn = QPushButton("–ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å")
            self.change_pwd_btn.setStyleSheet("background-color: #FF9800; color: white; padding: 6px; border-radius: 5px;")
            self.change_pwd_btn.clicked.connect(self.change_password)
            self.tabs.addTab(RatingTab(readonly=True), "–†–µ–π—Ç–∏–Ω–≥")

            layout.addWidget(self.change_pwd_btn, alignment=Qt.AlignLeft)

        layout.addWidget(self.tabs)
        self.setLayout(layout)

        # –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫
        self.tabs.setStyleSheet("""
            QTabBar::tab {
                font-size: 14px;
                font-weight: bold;
                padding: 8px;
                min-width: 190px;
                background: #CCCCCC;
            }
            QTabBar::tab:selected {
                background: #4CAF50;
                color: white;
            }
            QTabBar::tab:!selected {
                background: #CCCCCC;
                color: black;
            }
        """)

    def change_password(self):
        dialog = ChangePasswordDialog(self.user_data["id"], self.user_data["name"], self)
        dialog.exec_()




if __name__ == "__main__":
    import sys
    from PyQt5.QtWidgets import QApplication

    app = QApplication(sys.argv)

    login_dialog = LoginDialog()
    if login_dialog.exec_() == QDialog.Accepted:
        user_data = login_dialog.user_data
        main_window = MainApp(user_data)
        main_window.show()
        sys.exit(app.exec_())

    
    